<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>syukoushin</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-22T01:56:08.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>syukoushin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/06/01/spring%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2018/06/01/spring初始化浅析/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-22T01:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring初始化浅析"><a href="#Spring初始化浅析" class="headerlink" title="Spring初始化浅析"></a>Spring初始化浅析</h1><hr><pre><code>前言本文主要简单讲解在web容器中Spring初始化的过程，因个人能力有限，文中难免有误，口下留情。  </code></pre><p><em>注：本文中源代码使用的spring版本为4.1.9</em></p><h3 id="1、从web-xml说起"><a href="#1、从web-xml说起" class="headerlink" title="1、从web.xml说起"></a>1、从web.xml说起</h3><p>我们在做一个web项目时，如果想使用spring，都会在web.xml中配置如下一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath*:/spring-context*.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;listener&gt;</span><br><span class="line">    &lt;listener-<span class="class"><span class="keyword">class</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span></span></span><br><span class="line"><span class="class">    &lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 此处我们可以看到配置了一个监听器<code>ContextLoaderListener</code>，这个监听器就是加载spring的源头。</p><h3 id="2、ContextLoaderListener监听器"><a href="#2、ContextLoaderListener监听器" class="headerlink" title="2、ContextLoaderListener监听器"></a>2、<code>ContextLoaderListener</code>监听器</h3><p> 源代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ContextLoaderListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ContextLoaderListener</span><span class="params">(WebApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the root web application context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">initWebApplicationContext(event.getServletContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Close the root web application context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">closeWebApplicationContext(event.getServletContext());</span><br><span class="line">ContextCleanupListener.cleanupAttributes(event.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过源代码我们可以看到，该监听器实现了<code>ServletContentListener</code>接口，该接口是web容器（通常就是tomcat）, 在web容器初始化的时候，会执行监听器中的<code>contextInitialized</code>方法，关于<code>ServletContentListener</code> 具体可参考该博文<a href="https://blog.csdn.net/zhaozheng7758/article/details/6103700" target="_blank" rel="noopener">ServletContextListener使用详解</a>。  </p><p>好，接下来我们就看一下 initWebApplicaitonContext的源代码，什么？event.getServletContext()是干嘛的，理解成能获取web容器的上下文就好了，具体的其实我也不懂…… 再过多解释就到web容器，servlet了，不讨论。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line">String ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE = WebApplicationContext.class.getName() + <span class="string">".ROOT"</span>;</span><br><span class="line">……</span><br><span class="line"><span class="function"><span class="keyword">public</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Cannot initialize context because there is already a root application context present - "</span> +</span><br><span class="line"><span class="string">"check whether you have multiple ContextLoader* definitions in your web.xml!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Log logger = LogFactory.getLog(ContextLoader.class);</span><br><span class="line">servletContext.log(<span class="string">"Initializing Spring root WebApplicationContext"</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="string">"Root WebApplicationContext: initialization started"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Store context in local instance variable, to guarantee that</span></span><br><span class="line"><span class="comment">// it is available on ServletContext shutdown.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</span><br><span class="line"><span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line"><span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line"><span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line"><span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// The context instance was injected without an explicit parent -&gt;</span></span><br><span class="line"><span class="comment">// determine parent for root web application context, if any.</span></span><br><span class="line">ApplicationContext parent = loadParentContext(servletContext);</span><br><span class="line">cwac.setParent(parent);</span><br><span class="line">&#125;</span><br><span class="line">configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">this</span>.context);</span><br><span class="line"></span><br><span class="line">ClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="keyword">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class="line">currentContext = <span class="keyword">this</span>.context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="keyword">null</span>) &#123;</span><br><span class="line">currentContextPerThread.put(ccl, <span class="keyword">this</span>.context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Published root WebApplicationContext as ServletContext attribute with name ["</span> +</span><br><span class="line">WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">logger.info(<span class="string">"Root WebApplicationContext: initialization completed in "</span> + elapsedTime + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">logger.error(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line">servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">logger.error(<span class="string">"Context initialization failed"</span>, err);</span><br><span class="line">servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有代码可见，第一步先判断当前容器中是否存在了名叫<code>WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</code>的对象，如果存在抛出异常，如果不存在则会讲创建完的对象set进去<code>servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);</code>,此处的<code>this.context</code>是一个<code>WebApplicationContext</code>类型的对象，这样就能保证一个容器中只初始化一遍<code>WebApplicationContext</code>对象了,这里有个注意，如果context是空的话，会<code>createWebApplicationContext</code>,<br>这个方法就是决定用什么context来完成初始化。如果没有特殊指定的话，默认的是<code>XmlWebApplicationContext</code>,在<code>ContextLoader.properties</code>中配置的有<code>org.springframework.web.context.WebApplicationContext=org.springframework.web.context.support.XmlWebApplicationContext</code>。</p><h3 id="3、真正初始化"><a href="#3、真正初始化" class="headerlink" title="3、真正初始化"></a>3、真正初始化</h3><p>接下来是真正的初始化过程，从上面的源代码中可以看出<code>configureAndRefreshWebApplicationContext(cwac, servletContext);</code>该行代码是重点，该行上面的两句是干嘛的，嗯……我也不是很懂，只知道是初始化父容器的过程，可参考<a href="http://www.cnblogs.com/kevin-yuan/p/6404702.html" target="_blank" rel="noopener">spring子容器与父容器</a>该文章了解。</p><p>接下来进该方法中来看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc) &#123;</span><br><span class="line">if (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</span><br><span class="line">// The application context id is still set to its original default value</span><br><span class="line">// -&gt; assign a more useful id based on available information</span><br><span class="line">String idParam = sc.getInitParameter(CONTEXT_ID_PARAM);</span><br><span class="line">if (idParam != null) &#123;</span><br><span class="line">wac.setId(idParam);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Generate default id...</span><br><span class="line">wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</span><br><span class="line">ObjectUtils.getDisplayString(sc.getContextPath()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wac.setServletContext(sc);</span><br><span class="line">String configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);</span><br><span class="line">if (configLocationParam != null) &#123;</span><br><span class="line">wac.setConfigLocation(configLocationParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The wac environment&apos;s #initPropertySources will be called in any case when the context</span><br><span class="line">// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span><br><span class="line">// use in any post-processing or initialization that occurs below prior to #refresh</span><br><span class="line">ConfigurableEnvironment env = wac.getEnvironment();</span><br><span class="line">if (env instanceof ConfigurableWebEnvironment) &#123;</span><br><span class="line">((ConfigurableWebEnvironment) env).initPropertySources(sc, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customizeContext(sc, wac);</span><br><span class="line">wac.refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后一行<code>wac.refresh()</code> 便是根据配置的xml去创建bean的过程，wac是<code>XmlWebApplicationContext</code>类型的对象，refresh方法调用的是其父类<code>AbstractApplicationContext</code>里的方法，该内容比较多，我也没弄懂呢，就不展开了。</p><p>以上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring初始化浅析&quot;&gt;&lt;a href=&quot;#Spring初始化浅析&quot; class=&quot;headerlink&quot; title=&quot;Spring初始化浅析&quot;&gt;&lt;/a&gt;Spring初始化浅析&lt;/h1&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;前言本文主要简单讲解在web容器中Spri
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LINUN常用命令总结</title>
    <link href="http://yoursite.com/2018/05/23/LINUN%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/05/23/LINUN常用命令总结/</id>
    <published>2018-05-23T13:50:28.000Z</published>
    <updated>2018-05-23T15:13:11.943Z</updated>
    
    <content type="html"><![CDATA[<p>1、 防火墙<br>1) 重启后生效<br>开启： chkconfig iptables on<br>关闭： chkconfig iptables off </p><p>2）关闭某（80）指定端口<br>vi /etc/sysconfig/iptables<br>-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT<br>service iptables restart</p><p>2) 即时生效，重启后失效<br>检查状态：service iptables status<br>开启： service iptables start<br>关闭： service iptables stop<br>2、压缩/解压<br>压缩<br>tar -zcvf  name.tar  /opt/for/name/<br>解压<br><a id="more"></a><br>3、java相关<br>1） 查看java路径<br>whereis java<br>which java （java执行路径）<br>echo $JAVA_HOME<br>echo $PATH<br>2）配置Linux的环境变量：(记得source .bash_profile)<br>.         修改/etc/profile文件 （全局所有用户）<br>vi 此文件/etc/profile<br>在profile文件末尾加入：<br>export JAVA_HOME=/usr/share/jdk1.7.0_25<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>让环境变量生效，执行配置文件令其立刻生效命令#: source /etc/profile</p><p>.修改.bash_profile文件 （某个用户权限使用这些环境变量）<br>.bash_profile文件末尾加入：<br>export JAVA_HOME=/usr/share/jdk1.6.0_20<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p><p>.shell终端执行下列命令： （临时用）<br>export JAVA_HOME=/usr/share/jdk1.6.0_14<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p><p>3）卸载jdk<br>·找到jdk安装目录的_uninst子目录<br>·在shell终端执行命令./uninstall.sh即可卸载jdk。<br>4、端口号相关<br>1）查看端口号<br>lsof -i:4446</p><p>5、改系统时间：<br>   date -s “2007-08-03 14:15:00”<br>6、ftp/sftp命令<br>      ftp 10.228.245.64 60221<br>      kpidownload  KpiDownload1303</p><p>sftp <a href="mailto:root@10.142.56.67" target="_blank" rel="noopener">root@10.142.56.67</a> 22</p><blockquote><p>password<br>接着输入用户名 、密码 退出 bye</p></blockquote><p>7、查看系统重启情况<br>last reboot<br>who -b</p><p>8、查看硬盘大小<br>df -h<br>9 、查看目录空间大小<br>du<br>10、查看cpu信息<br> cat /proc/cpuinfo |grep name<br>11、查看内存信息<br> cat /proc/meminfo</p><p>8、定时任务<br>crontab -e   或者 vi /etc/crontab</p><p>9、查询nfs服务状态：service nfs status<br>      启动nfs服务：service nfs start<br>      挂载：mount<br> 10.142.60.90:/opt/tomcat_8.5/webapps/taskmanage/attachment /opt/tomcat_8.5/webapps/ta        skmanage/attachment<br>卸载：umount attachment<br>10、SecureCRT 安装rz 、sz<br>yum install lrzsz</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、 防火墙&lt;br&gt;1) 重启后生效&lt;br&gt;开启： chkconfig iptables on&lt;br&gt;关闭： chkconfig iptables off &lt;/p&gt;
&lt;p&gt;2）关闭某（80）指定端口&lt;br&gt;vi /etc/sysconfig/iptables&lt;br&gt;-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT&lt;br&gt;service iptables restart&lt;/p&gt;
&lt;p&gt;2) 即时生效，重启后失效&lt;br&gt;检查状态：service iptables status&lt;br&gt;开启： service iptables start&lt;br&gt;关闭： service iptables stop&lt;br&gt;2、压缩/解压&lt;br&gt;压缩&lt;br&gt;tar -zcvf  name.tar  /opt/for/name/&lt;br&gt;解压&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
