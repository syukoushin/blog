<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>syukoushin</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-01T12:56:38.350Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>syukoushin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring初始化浅析</title>
    <link href="http://yoursite.com/2018/06/01/spring%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2018/06/01/spring初始化浅析/</id>
    <published>2018-06-01T12:55:52.000Z</published>
    <updated>2018-06-01T12:56:38.350Z</updated>
    
    <content type="html"><![CDATA[<pre><code>前言</code></pre><p>本文主要简单讲解在web容器中Spring初始化的过程，因个人能力有限，文中难免有误，口下留情。</p><p>###1、从web.xml说起<br>我们在做一个web项目时，如果想使用spring做依赖注入框架，都会在web.xml中配置如下一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath*:/spring-context*.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;listener&gt;</span><br><span class="line">    &lt;listener-<span class="class"><span class="keyword">class</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span></span></span><br><span class="line"><span class="class">    &lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 此处我们可以看到配置了一个监听器<code>ContextLoaderListener</code>，这个监听器就是加载spring配置文件的源头。</p><p>###2、<code>ContextLoaderListener</code>监听器###<br> 源代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ContextLoaderListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ContextLoaderListener</span><span class="params">(WebApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the root web application context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">initWebApplicationContext(event.getServletContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Close the root web application context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">closeWebApplicationContext(event.getServletContext());</span><br><span class="line">ContextCleanupListener.cleanupAttributes(event.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过源代码我们可以看到，该监听器实现了<code>ServletContentListener</code>, 在web容器初始化的时候，会执行监听器中的<code>contextInitialized</code>方法，关于<code>ServletContentListener</code> 具体可参考该博文[ServletContextListener使用详解][1]<br>[1]: <a href="https://blog.csdn.net/zhaozheng7758/article/details/6103700" target="_blank" rel="noopener">https://blog.csdn.net/zhaozheng7758/article/details/6103700</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;前言
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本文主要简单讲解在web容器中Spring初始化的过程，因个人能力有限，文中难免有误，口下留情。&lt;/p&gt;
&lt;p&gt;###1、从web.xml说起&lt;br&gt;我们在做一个web项目时，如果想使用spring做依赖注入框架，都会在
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LINUN常用命令总结</title>
    <link href="http://yoursite.com/2018/05/23/LINUN%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/05/23/LINUN常用命令总结/</id>
    <published>2018-05-23T13:50:28.000Z</published>
    <updated>2018-05-23T15:13:11.943Z</updated>
    
    <content type="html"><![CDATA[<p>1、 防火墙<br>1) 重启后生效<br>开启： chkconfig iptables on<br>关闭： chkconfig iptables off </p><p>2）关闭某（80）指定端口<br>vi /etc/sysconfig/iptables<br>-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT<br>service iptables restart</p><p>2) 即时生效，重启后失效<br>检查状态：service iptables status<br>开启： service iptables start<br>关闭： service iptables stop<br>2、压缩/解压<br>压缩<br>tar -zcvf  name.tar  /opt/for/name/<br>解压<br><a id="more"></a><br>3、java相关<br>1） 查看java路径<br>whereis java<br>which java （java执行路径）<br>echo $JAVA_HOME<br>echo $PATH<br>2）配置Linux的环境变量：(记得source .bash_profile)<br>.         修改/etc/profile文件 （全局所有用户）<br>vi 此文件/etc/profile<br>在profile文件末尾加入：<br>export JAVA_HOME=/usr/share/jdk1.7.0_25<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>让环境变量生效，执行配置文件令其立刻生效命令#: source /etc/profile</p><p>.修改.bash_profile文件 （某个用户权限使用这些环境变量）<br>.bash_profile文件末尾加入：<br>export JAVA_HOME=/usr/share/jdk1.6.0_20<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p><p>.shell终端执行下列命令： （临时用）<br>export JAVA_HOME=/usr/share/jdk1.6.0_14<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p><p>3）卸载jdk<br>·找到jdk安装目录的_uninst子目录<br>·在shell终端执行命令./uninstall.sh即可卸载jdk。<br>4、端口号相关<br>1）查看端口号<br>lsof -i:4446</p><p>5、改系统时间：<br>   date -s “2007-08-03 14:15:00”<br>6、ftp/sftp命令<br>      ftp 10.228.245.64 60221<br>      kpidownload  KpiDownload1303</p><p>sftp <a href="mailto:root@10.142.56.67" target="_blank" rel="noopener">root@10.142.56.67</a> 22</p><blockquote><p>password<br>接着输入用户名 、密码 退出 bye</p></blockquote><p>7、查看系统重启情况<br>last reboot<br>who -b</p><p>8、查看硬盘大小<br>df -h<br>9 、查看目录空间大小<br>du<br>10、查看cpu信息<br> cat /proc/cpuinfo |grep name<br>11、查看内存信息<br> cat /proc/meminfo</p><p>8、定时任务<br>crontab -e   或者 vi /etc/crontab</p><p>9、查询nfs服务状态：service nfs status<br>      启动nfs服务：service nfs start<br>      挂载：mount<br> 10.142.60.90:/opt/tomcat_8.5/webapps/taskmanage/attachment /opt/tomcat_8.5/webapps/ta        skmanage/attachment<br>卸载：umount attachment<br>10、SecureCRT 安装rz 、sz<br>yum install lrzsz</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、 防火墙&lt;br&gt;1) 重启后生效&lt;br&gt;开启： chkconfig iptables on&lt;br&gt;关闭： chkconfig iptables off &lt;/p&gt;
&lt;p&gt;2）关闭某（80）指定端口&lt;br&gt;vi /etc/sysconfig/iptables&lt;br&gt;-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT&lt;br&gt;service iptables restart&lt;/p&gt;
&lt;p&gt;2) 即时生效，重启后失效&lt;br&gt;检查状态：service iptables status&lt;br&gt;开启： service iptables start&lt;br&gt;关闭： service iptables stop&lt;br&gt;2、压缩/解压&lt;br&gt;压缩&lt;br&gt;tar -zcvf  name.tar  /opt/for/name/&lt;br&gt;解压&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
